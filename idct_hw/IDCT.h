/*
 *    Class definition of the SoC Designer component <IDCT>
 *
 *    This code has been generated by the SoC Designer Component Wizard.
 *    Copyright (c) 2004-2005 by ARM Limited, 2000-2004 by AXYS Design Automation Inc., Irvine, CA, USA and AXYS GmbH, Herzongenrath
 *
 */

#ifndef IDCT__H
#define IDCT__H

#include "maxsim.h"
#include "AHB_Transaction.h"


#include "MxSaveRestore.h"


// Place global class declarations here:


class IDCT_MxDI;




class IDCT : public sc_mx_module
    , public MxSaveRestore
{
    // Declare your friends here:

    friend class ahb_s_TS;

    friend class IDCT_MxDI;

public:
    // Place instance declarations for the Ports here:
    ahb_s_TS* ahb_s_TSlave;
	
    // constructor / destructor
    IDCT(sc_mx_m_base* c, const string &s);
    virtual ~IDCT();

    // overloaded methods for clocked components
    void communicate();
    void update();

    // Implementation of MxSaveRestore interface methods
    virtual bool saveData( MxODataStream &data );
    virtual bool restoreData( MxIDataStream &data );


    // overloaded sc_mx_module methods
    string getName();
    void setParameter(const string &name, const string &value);
    string getProperty( MxPropertyType property );
    void init();
    void terminate();
    void reset(MxResetLevel level, const MxFileMapIF *filelist);
    // The MxDI interface.
    MXDI* getMxDI();

    //Initialize the Port Properties
    void initSignalPort(sc_mx_signal_p_base* signalIf);
    void initTransactionPort(sc_mx_transaction_p_base* transIf);


private:
    bool initComplete; 
    bool p_enableDbgMsg;

    // User defined parameters:
    MxU64 p_ahb_s_addrSize;
    MxU64 p_ahb_s_baseAddress;
	TAHBSignals *pSignals;	//  pointer to the shared signal structure of the bus


    // Declare MXDI Interface
    MXDI* mxdi;

    MxU32 r_reg0;
    MxU32 r_reg1;
    MxU32 r_reg2;
    MxU32 r_reg3;
    MxU32 r_reg4;
    MxU32 r_reg5;
    MxU32 r_reg6;
    MxU32 r_reg7;
    MxU32 r_reg8;
    MxU32 r_reg9;
    MxU32 r_reg10;
    MxU32 r_reg11;
    MxU32 r_reg12;
    MxU32 r_reg13;
    MxU32 r_reg14;
    MxU32 r_reg15;
    MxU32 r_reg16;
    MxU32 r_reg17;
    MxU32 r_reg18;
    MxU32 r_reg19;
    MxU32 r_reg20;
    MxU32 r_reg21;
    MxU32 r_reg22;
    MxU32 r_reg23;
    MxU32 r_reg24;
    MxU32 r_reg25;
    MxU32 r_reg26;
    MxU32 r_reg27;
    MxU32 r_reg28;
    MxU32 r_reg29;
    MxU32 r_reg30;
    MxU32 r_reg31;
    MxU32 r_reg32;
    MxU32 r_reg33;
    MxU32 r_reg34;
    MxU32 r_reg35;
    MxU32 r_reg36;
    MxU32 r_reg37;
    MxU32 r_reg38;
    MxU32 r_reg39;
    MxU32 r_reg40;
    MxU32 r_reg41;
    MxU32 r_reg42;
    MxU32 r_reg43;
    MxU32 r_reg44;
    MxU32 r_reg45;
    MxU32 r_reg46;
    MxU32 r_reg47;
    MxU32 r_reg48;
    MxU32 r_reg49;
    MxU32 r_reg50;
    MxU32 r_reg51;
    MxU32 r_reg52;
    MxU32 r_reg53;
    MxU32 r_reg54;
    MxU32 r_reg55;
    MxU32 r_reg56;
    MxU32 r_reg57;
    MxU32 r_reg58;
    MxU32 r_reg59;
    MxU32 r_reg60;
    MxU32 r_reg61;
    MxU32 r_reg62;
    MxU32 r_reg63;
    MxU32 r_ctrl;
    MxU32 r_status;



    // place your private functions and data members here:
    // ...
    // This shows an example state variable for the save/restore mechanism.
    // int		exampleStateVariable;
    MxU32 data[64];

};

#endif
